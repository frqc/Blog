<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tim&#39;s ER</title>
    <link>https://frqc.github.io/blog/</link>
    <description>Recent content on Tim&#39;s ER</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://frqc.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://frqc.github.io/blog/posts/init/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://frqc.github.io/blog/posts/init/</guid>
      <description>Raspberry Init and Devlopment 烧入镜像 HypriotsOS
win32 Disk Imager
device-init.yaml
[config] 中是树莓派硬件相关的设置
hdmi_force_hotplug=1 enable_uart=1
#camera settings, see http://elinux.org/RPiconfig#Camera start_x=1 disable_camera_led=1 gpu_mem=128
# Enable audio (added by raspberrypi-sys-mods) dtparam=audio=on
wifi setup if you are using offical rpi image, create /boot/wpa_supplicant.conf and it will be copied into /etc/wpa_supplicant/wpa_supplicant.conf when booting.
skeleton wpa_supplicant:
network={ ssid=&amp;quot;YOUR_SSID&amp;quot; psk=&amp;quot;YOUR_PASSWORD&amp;quot; key_mgmt=WPA-PSK }  ref
also, by default ssh is disable. you need to create an empty ssh file in /boot/ to enable it in booting.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://frqc.github.io/blog/posts/pillow_usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://frqc.github.io/blog/posts/pillow_usage/</guid>
      <description>install just pip
basic operation from PIL import Images as img my_image = img.open(&amp;quot;filename&amp;quot;)  保存 my_image.save(filename)  图片基本信息 width = my_image.size[0] depth = my_image.size[1]  裁剪 cropped_img = my_img.crop(x_start, y_start, x_length, y_length)  标记文字 from PIL import ImageFont font = ImageFont.truetype(&#39;Arial.ttf&#39;, 36) my_img.text((10, 25), &amp;quot;world&amp;quot;, font=font)  打框 im = Image.new(&amp;quot;RGB&amp;quot;, (100, 200), (255,0,0)) dr = ImageDraw.Draw(im) dr.rectangle(((0,0),(50,50)), fill=None, outline = &amp;quot;blue&amp;quot;) # the width cannot be set im.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://frqc.github.io/blog/posts/tf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://frqc.github.io/blog/posts/tf/</guid>
      <description>first run with build-in model test installization transform data into TFFomart use given data ref use custom data ref
label map rgb image + list of bounding box
prepare pipeline ```object_detection/samples/configs/faster_rcnn_resnet101_pets.config``` ### run locally ```sh python object_detection/train.py \ --logtostderr \ --pipeline_config_path=&amp;quot;/mnt/d/Dropbox (Personal)/script/tf_related/object_detect_data/fi.configure&amp;quot; \ --train_dir=&amp;quot;/mnt/d/Dropbox (Personal)/script/tf_related/object_detect_data/&amp;quot;  model runtime routine start with train.py in trian.py handle cli arguemnet handle pipeline argument fire trainer.train in trainer.py with argument
train in trainer.py in tarin()</description>
    </item>
    
    <item>
      <title></title>
      <link>https://frqc.github.io/blog/posts/tf_2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://frqc.github.io/blog/posts/tf_2/</guid>
      <description>#</description>
    </item>
    
    <item>
      <title></title>
      <link>https://frqc.github.io/blog/posts/tf_3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://frqc.github.io/blog/posts/tf_3/</guid>
      <description>python 运行速度很慢，tensorflow 在训练时调用的是用 C++ 写好的模块。python 的开发速度很快。调用tensorflow 的 python api 时，实际上是定义了模型的流程图，或者曰计算图 (graph)。由此定义了数据的流动方向和权重优化方案之后，在一个中 session 向图喂入数据，不断计算 graph 和调整权重。
所以在 tf 中使用 python 的方式和存粹的 python 不近相同，包括数据的声明（都快变成强类型语言了）与传入（sess.run(op, feed={}) 与作为函数参数传入），图的计算（a=b+c 与 a = tf.add(b,c) ），全局变量(tf.collection)与 summary 等。特别是在引入了 tf.contrib 等高级 api 后，给计算图的定义带来了许多便利与不便。
图的计算: a = b + c, a = tf.add(b, c) session 中数据的传入 read TFRecord
tf 是如何知道哪些参数需要调整、计算梯度的？ 数据声明与全局变量 Losses
Losses with weight
梯度的优化与分布式 tf.app tf.collection model_deploy model_deploy.py
model restore? A quick complete tutorial to save and restore Tensorflow models</description>
    </item>
    
  </channel>
</rss>